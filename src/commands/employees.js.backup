const { SlashCommandBuilder, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('employees')
        .setDescription('Manage company employees')
        .addSubcommand(subcommand =>
            subcommand
                .setName('hire')
                .setDescription('Hire a new employee')
                .addStringOption(option =>
                    option
                        .setName('company')
                        .setDescription('Company name or ticker symbol')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option
                        .setName('type')
                        .setDescription('Employee type')
                        .setRequired(true)
                        .addChoices(
                            { name: 'NPC Worker (1x productivity)', value: 'npc' },
                            { name: 'Real Player (2.5x productivity)', value: 'player' }
                        )
                )
                .addUserOption(option =>
                    option
                        .setName('user')
                        .setDescription('Discord user to hire (only for player type)')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('fire')
                .setDescription('Fire an employee')
                .addIntegerOption(option =>
                    option
                        .setName('employee_id')
                        .setDescription('Employee ID to fire')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('List company employees')
                .addStringOption(option =>
                    option
                        .setName('company')
                        .setDescription('Company name or ticker symbol')
                        .setRequired(true)
                )
        ),

    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand();

        switch (subcommand) {
            case 'hire':
                await this.handleHire(interaction, client);
                break;
            case 'fire':
                await this.handleFire(interaction, client);
                break;
            case 'list':
                await this.handleList(interaction, client);
                break;
        }
    },

    async handleHire(interaction, client) {
        try {
            const companyQuery = interaction.options.getString('company');
            const employeeType = interaction.options.getString('type');
            const targetUser = interaction.options.getUser('user');

            // Find the company
            const company = await client.db.db.get(`
                SELECT c.*, u.username as owner_username 
                FROM companies c
                JOIN users u ON c.owner_id = u.discord_id
                WHERE (LOWER(c.name) LIKE LOWER(?) OR LOWER(c.ticker_symbol) LIKE LOWER(?))
                AND c.status = 'active'
            `, [`%${companyQuery}%`, `%${companyQuery}%`]);

            if (!company) {
                await interaction.reply({
                    content: '‚ùå No active company found with that name or ticker symbol.',
                    ephemeral: true
                });
                return;
            }

            // Check if user owns the company
            if (company.owner_id !== interaction.user.id) {
                await interaction.reply({
                    content: '‚ùå You can only hire employees for companies you own.',
                    ephemeral: true
                });
                return;
            }

            // Validate player type requirements
            if (employeeType === 'player') {
                if (!targetUser) {
                    await interaction.reply({
                        content: '‚ùå You must specify a Discord user when hiring a player employee.',
                        ephemeral: true
                    });
                    return;
                }

                // Check if the user is already employed by this company
                const existingEmployee = await client.db.db.get(`
                    SELECT * FROM employees 
                    WHERE company_id = ? AND employee_id = ? AND status = 'active'
                `, [company.id, targetUser.id]);

                if (existingEmployee) {
                    await interaction.reply({
                        content: `‚ùå ${targetUser.username} is already employed by ${company.name}.`,
                        ephemeral: true
                    });
                    return;
                }
            }

            // Create modal for hiring details
            const modal = new ModalBuilder()
                .setCustomId(`hire_employee_${company.id}_${employeeType}_${targetUser?.id || 'npc'}`)
                .setTitle(`Hire ${employeeType === 'npc' ? 'NPC' : 'Player'} Employee`);

            const nameInput = new TextInputBuilder()
                .setCustomId('employee_name')
                .setLabel('Employee Name')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder(employeeType === 'npc' ? 'Enter NPC name' : targetUser?.username || 'Enter name')
                .setRequired(true)
                .setMaxLength(50);

            if (employeeType === 'player' && targetUser) {
                nameInput.setValue(targetUser.username);
            }

            const positionInput = new TextInputBuilder()
                .setCustomId('position')
                .setLabel('Position/Role')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('Software Engineer, Sales Rep, Manager, etc.')
                .setRequired(true)
                .setMaxLength(50);

            const salaryInput = new TextInputBuilder()
                .setCustomId('salary')
                .setLabel('Monthly Salary')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('Enter salary amount (e.g., 5000)')
                .setRequired(true)
                .setMaxLength(10);

            const row1 = new ActionRowBuilder().addComponents(nameInput);
            const row2 = new ActionRowBuilder().addComponents(positionInput);
            const row3 = new ActionRowBuilder().addComponents(salaryInput);

            modal.addComponents(row1, row2, row3);
            await interaction.showModal(modal);

        } catch (error) {
            console.error('Error in hire command:', error);
            await interaction.reply({
                content: '‚ùå There was an error processing your hire request.',
                ephemeral: true
            });
        }
    },

    async handleFire(interaction, client) {
        try {
            const employeeId = interaction.options.getInteger('employee_id');

            // Get employee details and check ownership
            const employee = await client.db.db.get(`
                SELECT e.*, c.name as company_name, c.owner_id as company_owner_id
                FROM employees e
                JOIN companies c ON e.company_id = c.id
                WHERE e.id = ? AND e.status = 'active'
            `, [employeeId]);

            if (!employee) {
                await interaction.reply({
                    content: '‚ùå Employee not found or already inactive.',
                    ephemeral: true
                });
                return;
            }

            // Check if user owns the company
            if (employee.company_owner_id !== interaction.user.id) {
                await interaction.reply({
                    content: '‚ùå You can only fire employees from companies you own.',
                    ephemeral: true
                });
                return;
            }

            // Fire the employee
            await client.db.fireEmployee(employeeId);

            const embed = new EmbedBuilder()
                .setTitle('üëî Employee Fired')
                .setColor(0xFF0000)
                .addFields(
                    { name: 'Employee', value: employee.name, inline: true },
                    { name: 'Position', value: employee.position, inline: true },
                    { name: 'Company', value: employee.company_name, inline: true },
                    { name: 'Type', value: employee.employee_type === 'npc' ? 'NPC Worker' : 'Player', inline: true },
                    { name: 'Monthly Salary', value: `$${employee.salary.toLocaleString()}`, inline: true }
                )
                .setTimestamp()
                .setFooter({ text: 'Corporate Empire Bot' });

            await interaction.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Error in fire command:', error);
            await interaction.reply({
                content: '‚ùå There was an error firing the employee.',
                ephemeral: true
            });
        }
    },

    async handleList(interaction, client) {
        try {
            const companyQuery = interaction.options.getString('company');

            // Find the company
            const company = await client.db.db.get(`
                SELECT c.*, u.username as owner_username 
                FROM companies c
                JOIN users u ON c.owner_id = u.discord_id
                WHERE (LOWER(c.name) LIKE LOWER(?) OR LOWER(c.ticker_symbol) LIKE LOWER(?))
                AND c.status = 'active'
            `, [`%${companyQuery}%`, `%${companyQuery}%`]);

            if (!company) {
                await interaction.reply({
                    content: '‚ùå No active company found with that name or ticker symbol.',
                    ephemeral: true
                });
                return;
            }

            // Get company employees
            const employees = await client.db.getCompanyEmployees(company.id);

            if (employees.length === 0) {
                await interaction.reply({
                    content: `üìä ${company.name} has no employees. Use \`/employees hire\` to hire your first employee!`,
                    ephemeral: true
                });
                return;
            }

            const embed = new EmbedBuilder()
                .setTitle(`üë• ${company.name} - Employees`)
                .setColor(0x0099FF)
                .setDescription(`Total Employees: ${employees.length}`)
                .setTimestamp()
                .setFooter({ text: 'Corporate Empire Bot' });

            // Calculate total productivity and payroll
            let totalProductivity = 0;
            let totalPayroll = 0;
            let npcCount = 0;
            let playerCount = 0;

            for (const employee of employees) {
                totalProductivity += employee.salary * employee.productivity_multiplier;
                totalPayroll += employee.salary;
                
                if (employee.employee_type === 'npc') {
                    npcCount++;
                } else {
                    playerCount++;
                }

                const employeeName = employee.employee_type === 'npc' 
                    ? employee.name 
                    : `${employee.name} (${employee.discord_username || 'Unknown'})`;

                const productivity = employee.employee_type === 'npc' ? '1.0x' : '2.5x';

                embed.addFields({
                    name: `#${employee.id} - ${employeeName}`,
                    value: `**Position:** ${employee.position}\\n**Type:** ${employee.employee_type === 'npc' ? 'NPC' : 'Player'}\\n**Salary:** $${employee.salary.toLocaleString()}/month\\n**Productivity:** ${productivity}\\n**Hired:** ${new Date(employee.hire_date).toLocaleDateString()}`,
                    inline: true
                });
            }

            embed.addFields(
                { name: 'üìä Summary', value: `**NPC Workers:** ${npcCount}\\n**Player Workers:** ${playerCount}\\n**Monthly Payroll:** $${totalPayroll.toLocaleString()}\\n**Total Monthly Output:** $${Math.round(totalProductivity).toLocaleString()}`, inline: false }
            );

            await interaction.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Error in list employees command:', error);
            await interaction.reply({
                content: '‚ùå There was an error retrieving employee information.',
                ephemeral: true
            });
        }
    }
};
