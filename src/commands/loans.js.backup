const { SlashCommandBuilder, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('loan')
        .setDescription('Manage company loans from the Central Bank')
        .addSubcommand(subcommand =>
            subcommand
                .setName('request')
                .setDescription('Apply for a loan from the Central Bank')
                .addStringOption(option =>
                    option
                        .setName('company')
                        .setDescription('Company name or ticker symbol')
                        .setRequired(true)
                )
                .addNumberOption(option =>
                    option
                        .setName('amount')
                        .setDescription('Loan amount requested')
                        .setRequired(true)
                        .setMinValue(10000)
                        .setMaxValue(10000000)
                )
                .addIntegerOption(option =>
                    option
                        .setName('term')
                        .setDescription('Loan term in months')
                        .setRequired(true)
                        .setMinValue(6)
                        .setMaxValue(240)
                        .addChoices(
                            { name: '6 months (Short term)', value: 6 },
                            { name: '12 months (1 year)', value: 12 },
                            { name: '24 months (2 years)', value: 24 },
                            { name: '36 months (3 years)', value: 36 },
                            { name: '60 months (5 years)', value: 60 },
                            { name: '120 months (10 years)', value: 120 }
                        )
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('status')
                .setDescription('Check loan status for your company')
                .addStringOption(option =>
                    option
                        .setName('company')
                        .setDescription('Company name or ticker symbol')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('repay')
                .setDescription('Make an early loan payment')
                .addIntegerOption(option =>
                    option
                        .setName('loan_id')
                        .setDescription('Loan ID to repay')
                        .setRequired(true)
                )
                .addNumberOption(option =>
                    option
                        .setName('amount')
                        .setDescription('Payment amount (leave empty for minimum payment)')
                        .setRequired(false)
                        .setMinValue(100)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('bank_status')
                .setDescription('View Central Bank status (Admin only)')
        ),

    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand();

        switch (subcommand) {
            case 'request':
                await this.handleRequest(interaction, client);
                break;
            case 'status':
                await this.handleStatus(interaction, client);
                break;
            case 'repay':
                await this.handleRepay(interaction, client);
                break;
            case 'bank_status':
                await this.handleBankStatus(interaction, client);
                break;
        }
    },

    async handleRequest(interaction, client) {
        try {
            const companyQuery = interaction.options.getString('company');
            const amount = interaction.options.getNumber('amount');
            const termMonths = interaction.options.getInteger('term');

            // Find the company
            const company = await client.db.db.get(`
                SELECT c.*, u.username as owner_username 
                FROM companies c
                JOIN users u ON c.owner_id = u.discord_id
                WHERE (LOWER(c.name) LIKE LOWER(?) OR LOWER(c.ticker_symbol) LIKE LOWER(?))
                AND c.status = 'active'
            `, [`%${companyQuery}%`, `%${companyQuery}%`]);

            if (!company) {
                await interaction.reply({
                    content: '‚ùå No active company found with that name or ticker symbol.',
                    ephemeral: true
                });
                return;
            }

            // Check if user owns the company
            if (company.owner_id !== interaction.user.id) {
                await interaction.reply({
                    content: '‚ùå You can only request loans for companies you own.',
                    ephemeral: true
                });
                return;
            }

            // Check for existing active loans
            const existingLoans = await client.db.getCompanyLoans(company.id);
            const activeLoans = existingLoans.filter(loan => loan.status === 'active');

            if (activeLoans.length >= 3) {
                await interaction.reply({
                    content: '‚ùå Your company already has the maximum number of active loans (3). Pay off existing loans before applying for new ones.',
                    ephemeral: true
                });
                return;
            }

            // Calculate credit score and loan terms
            const creditScore = await client.db.calculateCompanyCreditScore(company.id);
            const interestRate = client.db.calculateInterestRate(creditScore);
            const monthlyPayment = client.db.calculateMonthlyPayment(amount, interestRate, termMonths);

            // Create modal for collateral description
            const modal = new ModalBuilder()
                .setCustomId(`loan_request_${company.id}_${amount}_${termMonths}`)
                .setTitle('Loan Application - Collateral Information');

            const collateralInput = new TextInputBuilder()
                .setCustomId('collateral')
                .setLabel('Collateral Description')
                .setStyle(TextInputStyle.Paragraph)
                .setPlaceholder('Describe what assets you are willing to put up as collateral for this loan')
                .setRequired(true)
                .setMaxLength(500);

            const row1 = new ActionRowBuilder().addComponents(collateralInput);
            modal.addComponents(row1);

            // Store loan terms in the modal for processing
            await interaction.showModal(modal);

            // Send loan preview to user
            const previewEmbed = new EmbedBuilder()
                .setTitle('üìã Loan Application Preview')
                .setColor(0x0099FF)
                .addFields(
                    { name: 'Company', value: company.name, inline: true },
                    { name: 'Requested Amount', value: `$${amount.toLocaleString()}`, inline: true },
                    { name: 'Term', value: `${termMonths} months`, inline: true },
                    { name: 'Credit Score', value: creditScore.toString(), inline: true },
                    { name: 'Interest Rate', value: `${(interestRate * 100).toFixed(2)}% annually`, inline: true },
                    { name: 'Monthly Payment', value: `$${monthlyPayment.toLocaleString()}`, inline: true },
                    { name: 'Total Interest', value: `$${((monthlyPayment * termMonths) - amount).toLocaleString()}`, inline: true }
                )
                .setDescription('Please provide collateral information in the modal above to complete your application.')
                .setTimestamp()
                .setFooter({ text: 'Central Bank of Corporate Empire' });

            // This will be sent after modal submission
            interaction.followUp = async () => {
                await interaction.followUp({ embeds: [previewEmbed], ephemeral: true });
            };

        } catch (error) {
            console.error('Error in loan request command:', error);
            await interaction.reply({
                content: '‚ùå There was an error processing your loan application.',
                ephemeral: true
            });
        }
    },

    async handleStatus(interaction, client) {
        try {
            const companyQuery = interaction.options.getString('company');

            // Find the company
            const company = await client.db.db.get(`
                SELECT c.*, u.username as owner_username 
                FROM companies c
                JOIN users u ON c.owner_id = u.discord_id
                WHERE (LOWER(c.name) LIKE LOWER(?) OR LOWER(c.ticker_symbol) LIKE LOWER(?))
                AND c.status = 'active'
            `, [`%${companyQuery}%`, `%${companyQuery}%`]);

            if (!company) {
                await interaction.reply({
                    content: '‚ùå No active company found with that name or ticker symbol.',
                    ephemeral: true
                });
                return;
            }

            // Check if user owns the company or is admin
            if (company.owner_id !== interaction.user.id && !interaction.member.roles.cache.has(process.env.ADMIN_ROLE_ID)) {
                await interaction.reply({
                    content: '‚ùå You can only view loan status for companies you own.',
                    ephemeral: true
                });
                return;
            }

            // Get company loans
            const loans = await client.db.getCompanyLoans(company.id);

            if (loans.length === 0) {
                await interaction.reply({
                    content: `üìä ${company.name} has no loans. Use \`/loan request\` to apply for financing!`,
                    ephemeral: true
                });
                return;
            }

            const embed = new EmbedBuilder()
                .setTitle(`üè¶ ${company.name} - Loan Portfolio`)
                .setColor(0x4169E1)
                .setDescription(`Total Loans: ${loans.length}`)
                .setTimestamp()
                .setFooter({ text: 'Central Bank of Corporate Empire' });

            let totalActiveBalance = 0;
            let totalMonthlyPayments = 0;

            for (const loan of loans) {
                const statusEmoji = {
                    'active': 'üü¢',
                    'paid_off': '‚úÖ',
                    'defaulted': 'üî¥'
                };

                if (loan.status === 'active') {
                    totalActiveBalance += loan.remaining_balance;
                    totalMonthlyPayments += loan.monthly_payment;
                }

                embed.addFields({
                    name: `Loan #${loan.id} ${statusEmoji[loan.status] || '‚ùì'}`,
                    value: `**Principal:** $${loan.principal_amount.toLocaleString()}\\n**Balance:** $${loan.remaining_balance.toLocaleString()}\\n**Rate:** ${(loan.interest_rate * 100).toFixed(2)}%\\n**Payment:** $${loan.monthly_payment.toLocaleString()}/month\\n**Status:** ${loan.status}\\n**Next Payment:** ${new Date(loan.next_payment_date).toLocaleDateString()}`,
                    inline: true
                });
            }

            embed.addFields({
                name: 'üíº Portfolio Summary',
                value: `**Total Active Balance:** $${totalActiveBalance.toLocaleString()}\\n**Total Monthly Payments:** $${totalMonthlyPayments.toLocaleString()}\\n**Credit Score:** ${loan.credit_score || 'N/A'}`,
                inline: false
            });

            await interaction.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Error in loan status command:', error);
            await interaction.reply({
                content: '‚ùå There was an error retrieving loan information.',
                ephemeral: true
            });
        }
    },

    async handleRepay(interaction, client) {
        try {
            const loanId = interaction.options.getInteger('loan_id');
            const paymentAmount = interaction.options.getNumber('amount');

            // Get loan details
            const loan = await client.db.db.get(`
                SELECT l.*, c.name as company_name, c.owner_id, c.current_valuation
                FROM loans l
                JOIN companies c ON l.company_id = c.id
                WHERE l.id = ? AND l.status = 'active'
            `, [loanId]);

            if (!loan) {
                await interaction.reply({
                    content: '‚ùå Loan not found or not active.',
                    ephemeral: true
                });
                return;
            }

            // Check if user owns the company
            if (loan.owner_id !== interaction.user.id) {
                await interaction.reply({
                    content: '‚ùå You can only make payments on loans for companies you own.',
                    ephemeral: true
                });
                return;
            }

            // Use minimum payment if no amount specified
            const finalPaymentAmount = paymentAmount || loan.monthly_payment;

            // Check if payment amount is valid
            if (finalPaymentAmount > loan.remaining_balance) {
                await interaction.reply({
                    content: `‚ùå Payment amount ($${finalPaymentAmount.toLocaleString()}) cannot exceed remaining balance ($${loan.remaining_balance.toLocaleString()}).`,
                    ephemeral: true
                });
                return;
            }

            // Check if company has enough cash
            const user = await client.db.getUser(loan.owner_id);
            if (user.cash < finalPaymentAmount) {
                await interaction.reply({
                    content: `‚ùå Insufficient funds. You have $${user.cash.toLocaleString()} but need $${finalPaymentAmount.toLocaleString()}.`,
                    ephemeral: true
                });
                return;
            }

            // Calculate interest and principal portions
            const monthlyInterest = (loan.remaining_balance * loan.interest_rate) / 12;
            const principalPayment = Math.max(0, finalPaymentAmount - monthlyInterest);
            const interestPayment = finalPaymentAmount - principalPayment;

            // Update loan balance
            const newBalance = loan.remaining_balance - principalPayment;
            const newStatus = newBalance <= 0 ? 'paid_off' : 'active';

            await client.db.db.run(`
                UPDATE loans 
                SET remaining_balance = ?, status = ?, next_payment_date = ?
                WHERE id = ?
            `, [Math.max(0, newBalance), newStatus, new Date(Date.now() + (30 * 24 * 60 * 60 * 1000)).toISOString(), loanId]);

            // Record payment
            await client.db.db.run(`
                INSERT INTO loan_payments (loan_id, payment_amount, principal_amount, interest_amount, payment_type)
                VALUES (?, ?, ?, ?, ?)
            `, [loanId, finalPaymentAmount, principalPayment, interestPayment, paymentAmount ? 'early' : 'monthly']);

            // Update user cash
            await client.db.updateUserCash(loan.owner_id, -finalPaymentAmount);

            // Update Central Bank balance
            const currentPeriod = new Date().toISOString().substring(0, 7); // YYYY-MM format
            await client.db.updateCentralBankBalance(currentPeriod, 0, interestPayment, 0);

            const embed = new EmbedBuilder()
                .setTitle('üí≥ Loan Payment Processed')
                .setColor(newStatus === 'paid_off' ? 0x00FF00 : 0x0099FF)
                .addFields(
                    { name: 'Company', value: loan.company_name, inline: true },
                    { name: 'Loan ID', value: loan.id.toString(), inline: true },
                    { name: 'Payment Amount', value: `$${finalPaymentAmount.toLocaleString()}`, inline: true },
                    { name: 'Principal Payment', value: `$${principalPayment.toLocaleString()}`, inline: true },
                    { name: 'Interest Payment', value: `$${interestPayment.toLocaleString()}`, inline: true },
                    { name: 'Remaining Balance', value: `$${Math.max(0, newBalance).toLocaleString()}`, inline: true },
                    { name: 'Status', value: newStatus === 'paid_off' ? '‚úÖ Paid Off' : 'üü¢ Active', inline: false }
                )
                .setTimestamp()
                .setFooter({ text: 'Central Bank of Corporate Empire' });

            if (newStatus === 'paid_off') {
                embed.setDescription('üéâ **Congratulations!** This loan has been fully paid off!');
            }

            await interaction.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Error in loan repay command:', error);
            await interaction.reply({
                content: '‚ùå There was an error processing your payment.',
                ephemeral: true
            });
        }
    },

    async handleBankStatus(interaction, client) {
        try {
            // Check if user is admin
            if (!interaction.member.roles.cache.has(process.env.ADMIN_ROLE_ID)) {
                await interaction.reply({
                    content: '‚ùå This command is only available to administrators.',
                    ephemeral: true
                });
                return;
            }

            // Get current period
            const currentPeriod = new Date().toISOString().substring(0, 7); // YYYY-MM format

            // Get Central Bank balance
            const bankBalance = await client.db.db.get(`
                SELECT * FROM central_bank_balance 
                WHERE period = ? 
                ORDER BY last_updated DESC 
                LIMIT 1
            `, [currentPeriod]);

            // Get total active loans
            const loanStats = await client.db.db.get(`
                SELECT 
                    COUNT(*) as active_loans,
                    SUM(remaining_balance) as total_outstanding,
                    SUM(monthly_payment) as total_monthly_payments
                FROM loans 
                WHERE status = 'active'
            `);

            // Get tax collection stats for current period
            const taxStats = await client.db.db.get(`
                SELECT 
                    COUNT(*) as companies_taxed,
                    SUM(tax_amount) as total_taxes
                FROM tax_records 
                WHERE tax_period = ?
            `, [currentPeriod]);

            const embed = new EmbedBuilder()
                .setTitle('üèõÔ∏è Central Bank Status')
                .setColor(0x228B22)
                .setDescription(`Financial status for period ${currentPeriod}`)
                .addFields(
                    { name: 'üí∞ Current Balance', value: `$${(bankBalance?.closing_balance || 0).toLocaleString()}`, inline: true },
                    { name: 'üìä Tax Income (Current Month)', value: `$${(bankBalance?.tax_income || 0).toLocaleString()}`, inline: true },
                    { name: 'üè¶ Loan Interest Income', value: `$${(bankBalance?.loan_interest_income || 0).toLocaleString()}`, inline: true },
                    { name: 'üìà Active Loans', value: loanStats.active_loans?.toString() || '0', inline: true },
                    { name: 'üí∏ Total Outstanding', value: `$${(loanStats.total_outstanding || 0).toLocaleString()}`, inline: true },
                    { name: 'üìÖ Monthly Loan Income', value: `$${(loanStats.total_monthly_payments || 0).toLocaleString()}`, inline: true },
                    { name: 'üèõÔ∏è Companies Paying Taxes', value: taxStats.companies_taxed?.toString() || '0', inline: true },
                    { name: 'üíº Total Tax Revenue', value: `$${(taxStats.total_taxes || 0).toLocaleString()}`, inline: true }
                )
                .setTimestamp()
                .setFooter({ text: 'Central Bank of Corporate Empire' });

            await interaction.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Error in bank status command:', error);
            await interaction.reply({
                content: '‚ùå There was an error retrieving Central Bank status.',
                ephemeral: true
            });
        }
    }
};
