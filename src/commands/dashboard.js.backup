const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('dashboard')
        .setDescription('Financial dashboards and reports')
        .addSubcommand(subcommand =>
            subcommand
                .setName('company')
                .setDescription('View detailed financial dashboard for a company')
                .addStringOption(option =>
                    option
                        .setName('company')
                        .setDescription('Company name or ticker symbol')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('portfolio')
                .setDescription('View your investment portfolio')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('market')
                .setDescription('View market overview and trending stocks')
        ),

    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand();

        switch (subcommand) {
            case 'company':
                await this.handleCompanyDashboard(interaction, client);
                break;
            case 'portfolio':
                await this.handlePortfolioDashboard(interaction, client);
                break;
            case 'market':
                await this.handleMarketDashboard(interaction, client);
                break;
        }
    },

    async handleCompanyDashboard(interaction, client) {
        try {
            const companyQuery = interaction.options.getString('company');

            // Find the company
            const company = await client.db.db.get(`
                SELECT c.*, u.username as owner_username 
                FROM companies c
                JOIN users u ON c.owner_id = u.discord_id
                WHERE (LOWER(c.name) LIKE LOWER(?) OR LOWER(c.ticker_symbol) LIKE LOWER(?))
                AND c.status = 'active'
            `, [`%${companyQuery}%`, `%${companyQuery}%`]);

            if (!company) {
                await interaction.reply({
                    content: '❌ No active company found with that name or ticker symbol.',
                    ephemeral: true
                });
                return;
            }

            // Get financial performance data
            const performance = await client.db.db.all(`
                SELECT * FROM company_performance 
                WHERE company_id = ? 
                ORDER BY period DESC 
                LIMIT 6
            `, [company.id]);

            // Get employee count
            const employees = await client.db.db.get(`
                SELECT 
                    COUNT(*) as total_employees,
                    COUNT(CASE WHEN is_npc = 1 THEN 1 END) as npc_employees,
                    COUNT(CASE WHEN is_npc = 0 THEN 1 END) as player_employees,
                    AVG(productivity_multiplier) as avg_productivity
                FROM employees 
                WHERE company_id = ? AND is_active = 1
            `, [company.id]);

            // Get patent count and revenue
            const patents = await client.db.db.get(`
                SELECT 
                    COUNT(*) as total_patents,
                    COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved_patents,
                    COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_patents,
                    COALESCE(SUM(CASE WHEN status = 'approved' THEN monthly_revenue ELSE 0 END), 0) as monthly_patent_revenue
                FROM patents 
                WHERE company_id = ?
            `, [company.id]);

            // Get loan information
            const loans = await client.db.db.get(`
                SELECT 
                    COUNT(*) as total_loans,
                    COALESCE(SUM(CASE WHEN status = 'active' THEN remaining_balance ELSE 0 END), 0) as outstanding_debt,
                    COALESCE(AVG(CASE WHEN status = 'active' THEN interest_rate ELSE NULL END), 0) as avg_interest_rate
                FROM loans 
                WHERE company_id = ?
            `, [company.id]);

            // Calculate stock information
            const isPublic = company.shares_available > 0;
            const stockPrice = isPublic ? company.current_valuation / company.shares_outstanding : 0;
            const publicOwnership = isPublic ? ((company.shares_outstanding - company.shares_available) / company.shares_outstanding * 100) : 0;

            const embed = new EmbedBuilder()
                .setTitle(`📊 ${company.name} Financial Dashboard`)
                .setColor(0x1E90FF)
                .setDescription(`${company.description || 'No description available'}`)
                .addFields(
                    { name: '💰 Company Valuation', value: `$${company.current_valuation.toLocaleString()}`, inline: true },
                    { name: '🏦 Cash Balance', value: `$${company.cash.toLocaleString()}`, inline: true },
                    { name: '📅 Founded', value: `<t:${Math.floor(new Date(company.founded_date).getTime() / 1000)}:R>`, inline: true },
                    { name: '👑 Owner', value: company.owner_username, inline: true },
                    { name: '📈 Stock Status', value: isPublic ? '🌐 Public' : '🔒 Private', inline: true },
                    { name: '🎫 Ticker', value: company.ticker_symbol || 'N/A', inline: true }
                )
                .setTimestamp()
                .setFooter({ text: 'Corporate Empire Analytics' });

            // Stock information for public companies
            if (isPublic) {
                embed.addFields(
                    { name: '💹 Stock Price', value: `$${stockPrice.toFixed(2)}`, inline: true },
                    { name: '📊 Public Ownership', value: `${publicOwnership.toFixed(1)}%`, inline: true },
                    { name: '🔢 Shares Available', value: company.shares_available.toLocaleString(), inline: true }
                );
            }

            // Employee information
            if (employees && employees.total_employees > 0) {
                embed.addFields({
                    name: '👥 Workforce',
                    value: `**Total:** ${employees.total_employees}\\n**NPCs:** ${employees.npc_employees}\\n**Players:** ${employees.player_employees}\\n**Avg Productivity:** ${(employees.avg_productivity || 1).toFixed(2)}x`,
                    inline: true
                });
            } else {
                embed.addFields({
                    name: '👥 Workforce',
                    value: 'No employees',
                    inline: true
                });
            }

            // Patent information
            if (patents && patents.total_patents > 0) {
                embed.addFields({
                    name: '💡 Patents',
                    value: `**Total:** ${patents.total_patents}\\n**Approved:** ${patents.approved_patents}\\n**Pending:** ${patents.pending_patents}\\n**Monthly Revenue:** $${(patents.monthly_patent_revenue || 0).toLocaleString()}`,
                    inline: true
                });
            } else {
                embed.addFields({
                    name: '💡 Patents',
                    value: 'No patents filed',
                    inline: true
                });
            }

            // Loan information
            if (loans && loans.outstanding_debt > 0) {
                embed.addFields({
                    name: '💳 Debt',
                    value: `**Outstanding:** $${loans.outstanding_debt.toLocaleString()}\\n**Loans:** ${loans.total_loans}\\n**Avg Interest:** ${loans.avg_interest_rate.toFixed(2)}%`,
                    inline: true
                });
            } else {
                embed.addFields({
                    name: '💳 Debt',
                    value: 'No outstanding loans',
                    inline: true
                });
            }

            // Performance trends
            if (performance.length > 0) {
                const latest = performance[0];
                const previousMonth = performance.length > 1 ? performance[1] : null;
                
                let trend = '';
                if (previousMonth) {
                    const revenueChange = ((latest.total_revenue - previousMonth.total_revenue) / previousMonth.total_revenue * 100);
                    trend = revenueChange > 0 ? `📈 +${revenueChange.toFixed(1)}%` : `📉 ${revenueChange.toFixed(1)}%`;
                }

                embed.addFields({
                    name: '📈 Latest Performance',
                    value: `**Revenue:** $${latest.total_revenue.toLocaleString()} ${trend}\\n**Expenses:** $${latest.total_expenses.toLocaleString()}\\n**Net Income:** $${latest.net_monthly_income.toLocaleString()}\\n**Period:** ${latest.period}`,
                    inline: false
                });
            }

            // Create action buttons
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`dashboard_performance_${company.id}`)
                        .setLabel('📊 Performance Chart')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId(`dashboard_financial_${company.id}`)
                        .setLabel('💰 Financial Details')
                        .setStyle(ButtonStyle.Secondary)
                );

            if (isPublic) {
                actionRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`dashboard_stock_${company.id}`)
                        .setLabel('📈 Stock Analysis')
                        .setStyle(ButtonStyle.Success)
                );
            }

            await interaction.reply({ embeds: [embed], components: [actionRow] });

        } catch (error) {
            console.error('Error in company dashboard command:', error);
            await interaction.reply({
                content: '❌ There was an error generating the company dashboard.',
                ephemeral: true
            });
        }
    },

    async handlePortfolioDashboard(interaction, client) {
        try {
            // Ensure user exists
            await client.db.ensureUser(interaction.user.id, interaction.user.username);

            // Get user's cash balance
            const user = await client.db.db.get('SELECT * FROM users WHERE discord_id = ?', [interaction.user.id]);

            // Get user's stock holdings
            const holdings = await client.db.db.all(`
                SELECT 
                    sh.*, 
                    c.name as company_name, 
                    c.ticker_symbol, 
                    c.current_valuation,
                    c.shares_outstanding
                FROM stock_holdings sh
                JOIN companies c ON sh.company_id = c.id
                WHERE sh.user_id = ? AND sh.shares > 0
                ORDER BY sh.shares * (c.current_valuation / c.shares_outstanding) DESC
            `, [interaction.user.id]);

            // Get user's companies
            const companies = await client.db.db.all(`
                SELECT 
                    id, name, ticker_symbol, current_valuation, cash, shares_outstanding, shares_available
                FROM companies 
                WHERE owner_id = ? AND status = 'active'
            `, [interaction.user.id]);

            // Calculate portfolio value
            let totalStockValue = 0;
            let totalPortfolioValue = user.cash;

            holdings.forEach(holding => {
                const currentPrice = holding.current_valuation / holding.shares_outstanding;
                const holdingValue = holding.shares * currentPrice;
                totalStockValue += holdingValue;
            });

            totalPortfolioValue += totalStockValue;

            // Calculate company equity value
            let totalCompanyEquity = 0;
            companies.forEach(company => {
                const sharesOwned = company.shares_outstanding - company.shares_available;
                const equityValue = (sharesOwned / company.shares_outstanding) * company.current_valuation;
                totalCompanyEquity += equityValue;
            });

            const embed = new EmbedBuilder()
                .setTitle(`💼 ${interaction.user.username}'s Portfolio Dashboard`)
                .setColor(0x32CD32)
                .addFields(
                    { name: '💵 Cash Balance', value: `$${user.cash.toLocaleString()}`, inline: true },
                    { name: '📈 Stock Holdings Value', value: `$${totalStockValue.toLocaleString()}`, inline: true },
                    { name: '🏢 Company Equity Value', value: `$${totalCompanyEquity.toLocaleString()}`, inline: true },
                    { name: '💰 Total Portfolio Value', value: `$${(totalPortfolioValue + totalCompanyEquity).toLocaleString()}`, inline: false }
                )
                .setTimestamp()
                .setFooter({ text: 'Corporate Empire Portfolio Manager' });

            // Add stock holdings details
            if (holdings.length > 0) {
                let stockDetails = '';
                let totalGainLoss = 0;

                holdings.slice(0, 10).forEach(holding => {
                    const currentPrice = holding.current_valuation / holding.shares_outstanding;
                    const currentValue = holding.shares * currentPrice;
                    const gainLoss = currentValue - (holding.shares * holding.average_buy_price);
                    const gainLossPercentage = ((currentPrice - holding.average_buy_price) / holding.average_buy_price * 100);
                    
                    totalGainLoss += gainLoss;

                    const gainLossIcon = gainLoss >= 0 ? '📈' : '📉';
                    stockDetails += `${gainLossIcon} **${holding.company_name}** (${holding.ticker_symbol})\\n`;
                    stockDetails += `${holding.shares.toLocaleString()} shares @ $${currentPrice.toFixed(2)} = $${currentValue.toLocaleString()}\\n`;
                    stockDetails += `Gain/Loss: $${gainLoss.toFixed(0)} (${gainLossPercentage.toFixed(1)}%)\\n\\n`;
                });

                if (holdings.length > 10) {
                    stockDetails += `...and ${holdings.length - 10} more holdings`;
                }

                embed.addFields({
                    name: `📊 Stock Holdings (${holdings.length})`,
                    value: stockDetails || 'No holdings',
                    inline: false
                });

                embed.addFields({
                    name: '📈 Total Stock Performance',
                    value: `${totalGainLoss >= 0 ? '📈 Profit' : '📉 Loss'}: $${totalGainLoss.toLocaleString()}`,
                    inline: true
                });
            } else {
                embed.addFields({
                    name: '📊 Stock Holdings',
                    value: 'No stock holdings yet. Use `/stock buy` to start investing!',
                    inline: false
                });
            }

            // Add company ownership details
            if (companies.length > 0) {
                let companyDetails = '';
                companies.forEach(company => {
                    const sharesOwned = company.shares_outstanding - company.shares_available;
                    const ownershipPercentage = (sharesOwned / company.shares_outstanding * 100);
                    const equityValue = (sharesOwned / company.shares_outstanding) * company.current_valuation;

                    companyDetails += `🏢 **${company.name}** (${company.ticker_symbol || 'Private'})\\n`;
                    companyDetails += `${ownershipPercentage.toFixed(1)}% ownership • $${equityValue.toLocaleString()} equity\\n`;
                    companyDetails += `Company Cash: $${company.cash.toLocaleString()}\\n\\n`;
                });

                embed.addFields({
                    name: `🏢 Owned Companies (${companies.length})`,
                    value: companyDetails,
                    inline: false
                });
            }

            // Create action buttons
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('portfolio_refresh')
                        .setLabel('🔄 Refresh')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('portfolio_performance')
                        .setLabel('📈 Performance History')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('portfolio_alerts')
                        .setLabel('🔔 Price Alerts')
                        .setStyle(ButtonStyle.Success)
                );

            await interaction.reply({ embeds: [embed], components: [actionRow] });

        } catch (error) {
            console.error('Error in portfolio dashboard command:', error);
            await interaction.reply({
                content: '❌ There was an error generating your portfolio dashboard.',
                ephemeral: true
            });
        }
    },

    async handleMarketDashboard(interaction, client) {
        try {
            // Get market statistics
            const marketStats = await client.db.db.get(`
                SELECT 
                    COUNT(*) as total_companies,
                    COUNT(CASE WHEN shares_available > 0 THEN 1 END) as public_companies,
                    SUM(current_valuation) as total_market_cap,
                    AVG(current_valuation) as avg_company_value
                FROM companies 
                WHERE status = 'active'
            `);

            // Get most valuable companies
            const topCompanies = await client.db.db.all(`
                SELECT 
                    c.name, c.ticker_symbol, c.current_valuation, c.shares_outstanding, c.shares_available,
                    u.username as owner_username
                FROM companies c
                JOIN users u ON c.owner_id = u.discord_id
                WHERE c.status = 'active' AND c.shares_available > 0
                ORDER BY c.current_valuation DESC
                LIMIT 10
            `);

            // Get recent trading activity
            const recentTrades = await client.db.db.all(`
                SELECT 
                    st.*, c.name as company_name, c.ticker_symbol,
                    u.username as trader_username
                FROM stock_transactions st
                JOIN companies c ON st.company_id = c.id
                JOIN users u ON st.user_id = u.discord_id
                WHERE st.transaction_type IN ('buy', 'sell')
                ORDER BY st.timestamp DESC
                LIMIT 5
            `);

            // Get market movers (companies with recent IPOs or high activity)
            const marketMovers = await client.db.db.all(`
                SELECT 
                    c.name, c.ticker_symbol, c.current_valuation,
                    COUNT(st.id) as recent_trades,
                    SUM(st.shares) as total_shares_traded
                FROM companies c
                LEFT JOIN stock_transactions st ON c.id = st.company_id AND st.timestamp > datetime('now', '-7 days')
                WHERE c.status = 'active' AND c.shares_available > 0
                GROUP BY c.id
                ORDER BY recent_trades DESC, total_shares_traded DESC
                LIMIT 5
            `);

            const embed = new EmbedBuilder()
                .setTitle('📈 Corporate Empire Market Overview')
                .setColor(0x0099FF)
                .addFields(
                    { name: '🏢 Total Companies', value: marketStats.total_companies.toString(), inline: true },
                    { name: '🌐 Public Companies', value: marketStats.public_companies.toString(), inline: true },
                    { name: '💰 Total Market Cap', value: `$${(marketStats.total_market_cap || 0).toLocaleString()}`, inline: true },
                    { name: '📊 Avg Company Value', value: `$${(marketStats.avg_company_value || 0).toLocaleString()}`, inline: true }
                )
                .setTimestamp()
                .setFooter({ text: 'Corporate Empire Stock Exchange' });

            // Top companies by market cap
            if (topCompanies.length > 0) {
                let topCompaniesText = '';
                topCompanies.slice(0, 5).forEach((company, index) => {
                    const stockPrice = company.current_valuation / company.shares_outstanding;
                    topCompaniesText += `**${index + 1}.** ${company.name} (${company.ticker_symbol})\\n`;
                    topCompaniesText += `$${company.current_valuation.toLocaleString()} • $${stockPrice.toFixed(2)}/share\\n\\n`;
                });

                embed.addFields({
                    name: '🏆 Top Public Companies',
                    value: topCompaniesText,
                    inline: false
                });
            }

            // Market movers
            if (marketMovers.length > 0) {
                let moversText = '';
                marketMovers.forEach((company, index) => {
                    if (company.recent_trades > 0) {
                        moversText += `**${index + 1}.** ${company.name} (${company.ticker_symbol})\\n`;
                        moversText += `${company.recent_trades} trades • ${(company.total_shares_traded || 0).toLocaleString()} shares\\n\\n`;
                    }
                });

                if (moversText) {
                    embed.addFields({
                        name: '🔥 Market Movers (7 days)',
                        value: moversText,
                        inline: false
                    });
                }
            }

            // Recent trading activity
            if (recentTrades.length > 0) {
                let tradesText = '';
                recentTrades.forEach(trade => {
                    const tradeType = trade.transaction_type.toUpperCase();
                    const icon = trade.transaction_type === 'buy' ? '🟢' : '🔴';
                    tradesText += `${icon} **${tradeType}** ${trade.shares.toLocaleString()} ${trade.company_name} @ $${trade.price_per_share.toFixed(2)}\\n`;
                });

                embed.addFields({
                    name: '⚡ Recent Trades',
                    value: tradesText,
                    inline: false
                });
            }

            // Create action buttons
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('market_refresh')
                        .setLabel('🔄 Refresh')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('market_trending')
                        .setLabel('🔥 Trending')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('market_ipos')
                        .setLabel('🎊 Recent IPOs')
                        .setStyle(ButtonStyle.Success)
                );

            await interaction.reply({ embeds: [embed], components: [actionRow] });

        } catch (error) {
            console.error('Error in market dashboard command:', error);
            await interaction.reply({
                content: '❌ There was an error generating the market dashboard.',
                ephemeral: true
            });
        }
    },

    async generatePerformanceChart(client, companyId) {
        try {
            const performance = await client.db.db.all(`
                SELECT * FROM company_performance 
                WHERE company_id = ? 
                ORDER BY period ASC
                LIMIT 12
            `, [companyId]);

            if (performance.length === 0) {
                return '📊 No performance data available yet.';
            }

            let chartText = '```\\n';
            chartText += 'Revenue Trend (Last 12 Months)\\n';
            chartText += '================================\\n';

            const maxRevenue = Math.max(...performance.map(p => p.total_revenue));
            const scale = 40; // Width of chart

            performance.forEach((period, index) => {
                const barLength = Math.max(1, Math.floor((period.total_revenue / maxRevenue) * scale));
                const bar = '█'.repeat(barLength);
                const month = new Date(period.period).toLocaleDateString('en-US', { month: 'short', year: '2-digit' });
                
                chartText += `${month}: ${bar} $${period.total_revenue.toLocaleString()}\\n`;
            });

            chartText += '```';
            return chartText;

        } catch (error) {
            console.error('Error generating performance chart:', error);
            return '❌ Error generating performance chart.';
        }
    }
};
