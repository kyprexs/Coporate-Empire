const { SlashCommandBuilder, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('insurance')
        .setDescription('Business insurance and risk management')
        .addSubcommand(subcommand =>
            subcommand
                .setName('buy')
                .setDescription('Purchase insurance for your company')
                .addStringOption(option =>
                    option
                        .setName('company')
                        .setDescription('Company to insure')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option
                        .setName('type')
                        .setDescription('Type of insurance')
                        .setRequired(true)
                        .addChoices(
                            { name: 'General Liability', value: 'liability' },
                            { name: 'Property Insurance', value: 'property' },
                            { name: 'Business Interruption', value: 'interruption' },
                            { name: 'Cyber Security', value: 'cyber' },
                            { name: 'Directors & Officers', value: 'directors' },
                            { name: 'Professional Indemnity', value: 'professional' },
                            { name: 'Comprehensive Package', value: 'comprehensive' }
                        )
                )
                .addNumberOption(option =>
                    option
                        .setName('coverage_amount')
                        .setDescription('Coverage amount in dollars')
                        .setRequired(true)
                        .setMinValue(100000)
                        .setMaxValue(100000000)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('policies')
                .setDescription('View your insurance policies')
                .addStringOption(option =>
                    option
                        .setName('company')
                        .setDescription('Company to view policies for (optional)')
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('claim')
                .setDescription('File an insurance claim')
                .addIntegerOption(option =>
                    option
                        .setName('policy_id')
                        .setDescription('Insurance policy ID')
                        .setRequired(true)
                )
                .addNumberOption(option =>
                    option
                        .setName('claim_amount')
                        .setDescription('Amount to claim')
                        .setRequired(true)
                        .setMinValue(1000)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('renew')
                .setDescription('Renew an expiring insurance policy')
                .addIntegerOption(option =>
                    option
                        .setName('policy_id')
                        .setDescription('Insurance policy ID to renew')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('cancel')
                .setDescription('Cancel an insurance policy')
                .addIntegerOption(option =>
                    option
                        .setName('policy_id')
                        .setDescription('Insurance policy ID to cancel')
                        .setRequired(true)
                )
        ),

    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand();

        switch (subcommand) {
            case 'buy':
                await this.handleBuy(interaction, client);
                break;
            case 'policies':
                await this.handlePolicies(interaction, client);
                break;
            case 'claim':
                await this.handleClaim(interaction, client);
                break;
            case 'renew':
                await this.handleRenew(interaction, client);
                break;
            case 'cancel':
                await this.handleCancel(interaction, client);
                break;
        }
    },

    async handleBuy(interaction, client) {
        try {
            const companyQuery = interaction.options.getString('company');
            const insuranceType = interaction.options.getString('type');
            const coverageAmount = interaction.options.getNumber('coverage_amount');

            // Find the user's company
            const company = await client.db.getUserCompany(interaction.user.id, companyQuery);
            if (!company) {
                await interaction.reply({
                    content: '‚ùå Company not found or you don\'t own this company.',
                    ephemeral: true
                });
                return;
            }

            // Calculate premium based on coverage, company risk, and insurance type
            const premium = this.calculatePremium(insuranceType, coverageAmount, company);

            // Check if company has sufficient funds
            if (company.cash < premium) {
                await interaction.reply({
                    content: `‚ùå ${company.name} doesn't have enough cash for this premium. Required: $${premium.toLocaleString()}, Available: $${company.cash.toLocaleString()}`,
                    ephemeral: true
                });
                return;
            }

            // Check for existing similar policies
            const existingPolicy = await client.db.db.get(`
                SELECT * FROM insurance_policies 
                WHERE company_id = ? AND insurance_type = ? AND status = 'active'
            `, [company.id, insuranceType]);

            if (existingPolicy) {
                await interaction.reply({
                    content: `‚ùå ${company.name} already has an active ${this.getInsuranceTypeName(insuranceType)} policy. Cancel the existing one first if you want to change coverage.`,
                    ephemeral: true
                });
                return;
            }

            // Get insurance company (default admin company)
            const insuranceCompany = await client.db.db.get(`
                SELECT * FROM default_companies WHERE company_type = 'insurance'
            `);

            if (!insuranceCompany) {
                await interaction.reply({
                    content: '‚ùå Insurance services are temporarily unavailable.',
                    ephemeral: true
                });
                return;
            }

            // Process insurance purchase
            const policyStartDate = new Date();
            const policyEndDate = new Date();
            policyEndDate.setFullYear(policyEndDate.getFullYear() + 1); // 1 year policy

            await client.db.db.run('BEGIN TRANSACTION');

            try {
                // Create insurance policy
                const result = await client.db.db.run(`
                    INSERT INTO insurance_policies 
                    (company_id, insurance_type, coverage_amount, premium_paid, 
                     deductible, policy_start_date, policy_end_date, status)
                    VALUES (?, ?, ?, ?, ?, ?, ?, 'active')
                `, [
                    company.id,
                    insuranceType,
                    coverageAmount,
                    premium,
                    this.calculateDeductible(coverageAmount),
                    policyStartDate.toISOString(),
                    policyEndDate.toISOString()
                ]);

                // Deduct premium from company
                await client.db.updateUserCash(company.owner_id, -premium);

                // Add premium to insurance company
                await client.db.updateUserCash(insuranceCompany.owner_id, premium);

                await client.db.db.run('COMMIT');

                const embed = new EmbedBuilder()
                    .setTitle('üõ°Ô∏è Insurance Policy Purchased!')
                    .setColor(0x32CD32)
                    .addFields(
                        { name: 'Policy ID', value: result.lastID.toString(), inline: true },
                        { name: 'Company', value: company.name, inline: true },
                        { name: 'Insurance Type', value: this.getInsuranceTypeName(insuranceType), inline: true },
                        { name: 'Coverage Amount', value: `$${coverageAmount.toLocaleString()}`, inline: true },
                        { name: 'Annual Premium', value: `$${premium.toLocaleString()}`, inline: true },
                        { name: 'Deductible', value: `$${this.calculateDeductible(coverageAmount).toLocaleString()}`, inline: true },
                        { name: 'Policy Period', value: `${policyStartDate.toLocaleDateString()} - ${policyEndDate.toLocaleDateString()}`, inline: false }
                    )
                    .setDescription('üéâ Your company is now protected! You can file claims during the policy period.')
                    .setTimestamp()
                    .setFooter({ text: 'Corporate Empire Insurance Services' });

                await interaction.reply({ embeds: [embed] });

            } catch (error) {
                await client.db.db.run('ROLLBACK');
                throw error;
            }

        } catch (error) {
            console.error('Error in insurance buy command:', error);
            await interaction.reply({
                content: '‚ùå There was an error purchasing insurance.',
                ephemeral: true
            });
        }
    },

    async handlePolicies(interaction, client) {
        try {
            const companyQuery = interaction.options.getString('company');

            // Get user's companies
            let companies;
            if (companyQuery) {
                const company = await client.db.getUserCompany(interaction.user.id, companyQuery);
                if (!company) {
                    await interaction.reply({
                        content: '‚ùå Company not found or you don\'t own this company.',
                        ephemeral: true
                    });
                    return;
                }
                companies = [company];
            } else {
                companies = await client.db.db.all(`
                    SELECT * FROM companies 
                    WHERE owner_id = ? AND status = 'active'
                `, [interaction.user.id]);

                if (companies.length === 0) {
                    await interaction.reply({
                        content: '‚ùå You don\'t own any companies.',
                        ephemeral: true
                    });
                    return;
                }
            }

            const companyIds = companies.map(c => c.id);
            const placeholders = companyIds.map(() => '?').join(',');

            // Get insurance policies
            const policies = await client.db.db.all(`
                SELECT 
                    ip.*,
                    c.name as company_name, c.ticker_symbol
                FROM insurance_policies ip
                JOIN companies c ON ip.company_id = c.id
                WHERE ip.company_id IN (${placeholders})
                ORDER BY ip.policy_start_date DESC
            `, companyIds);

            const embed = new EmbedBuilder()
                .setTitle('üõ°Ô∏è Your Insurance Policies')
                .setColor(0x0099FF)
                .setTimestamp()
                .setFooter({ text: 'Corporate Empire Insurance Services' });

            if (policies.length === 0) {
                embed.setDescription('üìã No insurance policies found. Protect your companies with `/insurance buy`!');
                embed.setColor(0xFFD700);
            } else {
                let activePolicies = '';
                let expiredPolicies = '';
                
                policies.forEach(policy => {
                    const isActive = policy.status === 'active' && new Date(policy.policy_end_date) > new Date();
                    const icon = this.getInsuranceTypeIcon(policy.insurance_type);
                    const statusIcon = isActive ? '‚úÖ' : '‚ùå';
                    
                    const policyText = `${statusIcon} ${icon} **${this.getInsuranceTypeName(policy.insurance_type)}** (ID: ${policy.id})\\n`;
                    const detailText = `Company: ${policy.company_name}\\n`;
                    const coverageText = `Coverage: $${policy.coverage_amount.toLocaleString()} ‚Ä¢ Premium: $${policy.premium_paid.toLocaleString()}\\n`;
                    const dateText = `Expires: <t:${Math.floor(new Date(policy.policy_end_date).getTime() / 1000)}:D>\\n\\n`;
                    
                    if (isActive) {
                        activePolicies += policyText + detailText + coverageText + dateText;
                    } else {
                        expiredPolicies += policyText + detailText + coverageText + dateText;
                    }
                });

                if (activePolicies) {
                    embed.addFields({
                        name: '‚úÖ Active Policies',
                        value: activePolicies,
                        inline: false
                    });
                }

                if (expiredPolicies) {
                    embed.addFields({
                        name: '‚ùå Expired/Cancelled Policies',
                        value: expiredPolicies,
                        inline: false
                    });
                }

                // Calculate total coverage
                const totalCoverage = policies
                    .filter(p => p.status === 'active' && new Date(p.policy_end_date) > new Date())
                    .reduce((sum, policy) => sum + policy.coverage_amount, 0);

                embed.addFields({
                    name: 'üí∞ Total Active Coverage',
                    value: `$${totalCoverage.toLocaleString()}`,
                    inline: true
                });
            }

            // Create action buttons
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('insurance_buy_new')
                        .setLabel('üõí Buy New Policy')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('insurance_claims')
                        .setLabel('üìã View Claims')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('insurance_renew_expiring')
                        .setLabel('üîÑ Renew Expiring')
                        .setStyle(ButtonStyle.Success)
                );

            await interaction.reply({ embeds: [embed], components: [actionRow] });

        } catch (error) {
            console.error('Error in insurance policies command:', error);
            await interaction.reply({
                content: '‚ùå There was an error retrieving insurance policies.',
                ephemeral: true
            });
        }
    },

    async handleClaim(interaction, client) {
        try {
            const policyId = interaction.options.getInteger('policy_id');
            const claimAmount = interaction.options.getNumber('claim_amount');

            // Get policy details
            const policy = await client.db.db.get(`
                SELECT 
                    ip.*,
                    c.name as company_name, c.owner_id
                FROM insurance_policies ip
                JOIN companies c ON ip.company_id = c.id
                WHERE ip.id = ? AND ip.status = 'active'
            `, [policyId]);

            if (!policy) {
                await interaction.reply({
                    content: '‚ùå Insurance policy not found or not active.',
                    ephemeral: true
                });
                return;
            }

            // Check if user owns the company
            if (policy.owner_id !== interaction.user.id) {
                await interaction.reply({
                    content: '‚ùå You can only file claims for policies on companies you own.',
                    ephemeral: true
                });
                return;
            }

            // Check if policy is still valid
            if (new Date(policy.policy_end_date) < new Date()) {
                await interaction.reply({
                    content: '‚ùå This insurance policy has expired. Please renew it to file claims.',
                    ephemeral: true
                });
                return;
            }

            // Validate claim amount
            if (claimAmount > policy.coverage_amount) {
                await interaction.reply({
                    content: `‚ùå Claim amount exceeds policy coverage. Maximum: $${policy.coverage_amount.toLocaleString()}`,
                    ephemeral: true
                });
                return;
            }

            if (claimAmount < policy.deductible) {
                await interaction.reply({
                    content: `‚ùå Claim amount is below policy deductible. Minimum: $${policy.deductible.toLocaleString()}`,
                    ephemeral: true
                });
                return;
            }

            // Create modal for claim details
            const modal = new ModalBuilder()
                .setCustomId(`insurance_claim_${policyId}_${claimAmount}`)
                .setTitle('File Insurance Claim');

            const incidentInput = new TextInputBuilder()
                .setCustomId('incident_description')
                .setLabel('Incident Description')
                .setStyle(TextInputStyle.Paragraph)
                .setPlaceholder('Describe what happened that led to this claim...')
                .setRequired(true)
                .setMaxLength(1000);

            const dateInput = new TextInputBuilder()
                .setCustomId('incident_date')
                .setLabel('Incident Date (YYYY-MM-DD)')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('When did the incident occur?')
                .setRequired(true);

            const evidenceInput = new TextInputBuilder()
                .setCustomId('evidence')
                .setLabel('Supporting Evidence')
                .setStyle(TextInputStyle.Paragraph)
                .setPlaceholder('Any evidence, documentation, or additional details...')
                .setRequired(false)
                .setMaxLength(500);

            const firstActionRow = new ActionRowBuilder().addComponents(incidentInput);
            const secondActionRow = new ActionRowBuilder().addComponents(dateInput);
            const thirdActionRow = new ActionRowBuilder().addComponents(evidenceInput);

            modal.addComponents(firstActionRow, secondActionRow, thirdActionRow);

            await interaction.showModal(modal);

        } catch (error) {
            console.error('Error in insurance claim command:', error);
            await interaction.reply({
                content: '‚ùå There was an error processing the insurance claim.',
                ephemeral: true
            });
        }
    },

    async handleRenew(interaction, client) {
        try {
            const policyId = interaction.options.getInteger('policy_id');

            // Get policy details
            const policy = await client.db.db.get(`
                SELECT 
                    ip.*,
                    c.name as company_name, c.cash, c.owner_id, c.current_valuation
                FROM insurance_policies ip
                JOIN companies c ON ip.company_id = c.id
                WHERE ip.id = ?
            `, [policyId]);

            if (!policy) {
                await interaction.reply({
                    content: '‚ùå Insurance policy not found.',
                    ephemeral: true
                });
                return;
            }

            // Check if user owns the company
            if (policy.owner_id !== interaction.user.id) {
                await interaction.reply({
                    content: '‚ùå You can only renew policies for companies you own.',
                    ephemeral: true
                });
                return;
            }

            // Check if policy is eligible for renewal (within 30 days of expiry)
            const daysUntilExpiry = (new Date(policy.policy_end_date).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24);
            if (daysUntilExpiry > 30) {
                await interaction.reply({
                    content: `‚ùå Policy can only be renewed within 30 days of expiry. Days until expiry: ${Math.floor(daysUntilExpiry)}`,
                    ephemeral: true
                });
                return;
            }

            // Calculate new premium (may change based on company performance)
            const companyData = { 
                id: policy.company_id, 
                current_valuation: policy.current_valuation,
                cash: policy.cash 
            };
            const newPremium = this.calculatePremium(policy.insurance_type, policy.coverage_amount, companyData);

            // Check if company has sufficient funds
            if (policy.cash < newPremium) {
                await interaction.reply({
                    content: `‚ùå ${policy.company_name} doesn't have enough cash for renewal. Required: $${newPremium.toLocaleString()}, Available: $${policy.cash.toLocaleString()}`,
                    ephemeral: true
                });
                return;
            }

            // Process renewal
            const newStartDate = new Date(policy.policy_end_date);
            const newEndDate = new Date(newStartDate);
            newEndDate.setFullYear(newEndDate.getFullYear() + 1);

            await client.db.db.run('BEGIN TRANSACTION');

            try {
                // Update existing policy
                await client.db.db.run(`
                    UPDATE insurance_policies 
                    SET policy_end_date = ?, premium_paid = ?
                    WHERE id = ?
                `, [newEndDate.toISOString(), newPremium, policyId]);

                // Deduct premium from company
                await client.db.updateUserCash(policy.owner_id, -newPremium);

                // Add premium to insurance company
                const insuranceCompany = await client.db.db.get(`
                    SELECT * FROM default_companies WHERE company_type = 'insurance'
                `);
                if (insuranceCompany) {
                    await client.db.updateUserCash(insuranceCompany.owner_id, newPremium);
                }

                await client.db.db.run('COMMIT');

                const embed = new EmbedBuilder()
                    .setTitle('üîÑ Insurance Policy Renewed!')
                    .setColor(0x32CD32)
                    .addFields(
                        { name: 'Policy ID', value: policyId.toString(), inline: true },
                        { name: 'Company', value: policy.company_name, inline: true },
                        { name: 'Insurance Type', value: this.getInsuranceTypeName(policy.insurance_type), inline: true },
                        { name: 'Coverage Amount', value: `$${policy.coverage_amount.toLocaleString()}`, inline: true },
                        { name: 'Renewal Premium', value: `$${newPremium.toLocaleString()}`, inline: true },
                        { name: 'New Expiry Date', value: newEndDate.toLocaleDateString(), inline: true }
                    )
                    .setDescription('‚úÖ Your insurance coverage has been extended for another year!')
                    .setTimestamp()
                    .setFooter({ text: 'Corporate Empire Insurance Services' });

                await interaction.reply({ embeds: [embed] });

            } catch (error) {
                await client.db.db.run('ROLLBACK');
                throw error;
            }

        } catch (error) {
            console.error('Error in insurance renew command:', error);
            await interaction.reply({
                content: '‚ùå There was an error renewing the insurance policy.',
                ephemeral: true
            });
        }
    },

    async handleCancel(interaction, client) {
        try {
            const policyId = interaction.options.getInteger('policy_id');

            // Get policy details
            const policy = await client.db.db.get(`
                SELECT 
                    ip.*,
                    c.name as company_name, c.owner_id
                FROM insurance_policies ip
                JOIN companies c ON ip.company_id = c.id
                WHERE ip.id = ? AND ip.status = 'active'
            `, [policyId]);

            if (!policy) {
                await interaction.reply({
                    content: '‚ùå Active insurance policy not found.',
                    ephemeral: true
                });
                return;
            }

            // Check if user owns the company
            if (policy.owner_id !== interaction.user.id) {
                await interaction.reply({
                    content: '‚ùå You can only cancel policies for companies you own.',
                    ephemeral: true
                });
                return;
            }

            // Calculate pro-rated refund
            const now = new Date();
            const endDate = new Date(policy.policy_end_date);
            const totalDays = (endDate.getTime() - new Date(policy.policy_start_date).getTime()) / (1000 * 60 * 60 * 24);
            const remainingDays = Math.max(0, (endDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
            const refundAmount = Math.floor((remainingDays / totalDays) * policy.premium_paid * 0.8); // 80% refund

            // Cancel policy
            await client.db.db.run('BEGIN TRANSACTION');

            try {
                await client.db.db.run(`
                    UPDATE insurance_policies 
                    SET status = 'cancelled'
                    WHERE id = ?
                `, [policyId]);

                // Refund to company
                if (refundAmount > 0) {
                    await client.db.updateUserCash(policy.owner_id, refundAmount);
                }

                await client.db.db.run('COMMIT');

                const embed = new EmbedBuilder()
                    .setTitle('‚ùå Insurance Policy Cancelled')
                    .setColor(0xFF6B6B)
                    .addFields(
                        { name: 'Policy ID', value: policyId.toString(), inline: true },
                        { name: 'Company', value: policy.company_name, inline: true },
                        { name: 'Insurance Type', value: this.getInsuranceTypeName(policy.insurance_type), inline: true },
                        { name: 'Pro-rated Refund', value: `$${refundAmount.toLocaleString()}`, inline: true }
                    )
                    .setDescription('Your insurance policy has been cancelled. Your company is no longer covered.')
                    .setTimestamp()
                    .setFooter({ text: 'Corporate Empire Insurance Services' });

                await interaction.reply({ embeds: [embed] });

            } catch (error) {
                await client.db.db.run('ROLLBACK');
                throw error;
            }

        } catch (error) {
            console.error('Error in insurance cancel command:', error);
            await interaction.reply({
                content: '‚ùå There was an error cancelling the insurance policy.',
                ephemeral: true
            });
        }
    },

    calculatePremium(insuranceType, coverageAmount, company) {
        // Base premium rates as percentage of coverage
        const baseRates = {
            'liability': 0.008,      // 0.8%
            'property': 0.012,       // 1.2%
            'interruption': 0.015,   // 1.5%
            'cyber': 0.020,          // 2.0%
            'directors': 0.025,      // 2.5%
            'professional': 0.018,   // 1.8%
            'comprehensive': 0.035   // 3.5%
        };

        const baseRate = baseRates[insuranceType] || 0.015;
        let premium = coverageAmount * baseRate;

        // Risk multipliers based on company characteristics
        const companyValue = company.current_valuation || 100000;
        
        // Higher value companies pay more
        if (companyValue > 10000000) premium *= 1.3;
        else if (companyValue > 5000000) premium *= 1.2;
        else if (companyValue > 1000000) premium *= 1.1;
        else if (companyValue < 250000) premium *= 0.8; // Small business discount

        // Minimum premium
        premium = Math.max(premium, 1000);

        return Math.floor(premium);
    },

    calculateDeductible(coverageAmount) {
        // Deductible is typically 1-5% of coverage amount
        return Math.max(1000, Math.floor(coverageAmount * 0.02));
    },

    getInsuranceTypeName(type) {
        const types = {
            'liability': 'General Liability',
            'property': 'Property Insurance',
            'interruption': 'Business Interruption',
            'cyber': 'Cyber Security',
            'directors': 'Directors & Officers',
            'professional': 'Professional Indemnity',
            'comprehensive': 'Comprehensive Package'
        };
        return types[type] || type;
    },

    getInsuranceTypeIcon(type) {
        const icons = {
            'liability': '‚öñÔ∏è',
            'property': 'üè¢',
            'interruption': '‚è∏Ô∏è',
            'cyber': 'üîí',
            'directors': 'üëî',
            'professional': 'üéØ',
            'comprehensive': 'üõ°Ô∏è'
        };
        return icons[type] || 'üìã';
    },

    async processInsuranceClaim(client, policyId, claimAmount, description, evidence) {
        try {
            // Get policy details
            const policy = await client.db.db.get(`
                SELECT 
                    ip.*,
                    c.name as company_name, c.owner_id
                FROM insurance_policies ip
                JOIN companies c ON ip.company_id = c.id
                WHERE ip.id = ?
            `, [policyId]);

            if (!policy) {
                return { success: false, message: 'Policy not found' };
            }

            // Calculate payout (claim amount minus deductible)
            const payout = Math.max(0, claimAmount - policy.deductible);

            // Insurance companies may approve/deny based on risk assessment
            const approvalChance = this.calculateClaimApprovalChance(policy, claimAmount, description);
            const approved = Math.random() < approvalChance;

            // Record the claim
            await client.db.db.run(`
                INSERT INTO insurance_claims 
                (policy_id, claim_amount, incident_description, evidence, 
                 status, filed_date, payout_amount)
                VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?)
            `, [
                policyId,
                claimAmount,
                description,
                evidence || null,
                approved ? 'approved' : 'denied',
                approved ? payout : 0
            ]);

            if (approved && payout > 0) {
                // Pay claim to company owner
                await client.db.updateUserCash(policy.owner_id, payout);

                // Insurance company pays out
                const insuranceCompany = await client.db.db.get(`
                    SELECT * FROM default_companies WHERE company_type = 'insurance'
                `);
                if (insuranceCompany) {
                    await client.db.updateUserCash(insuranceCompany.owner_id, -payout);
                }
            }

            return {
                success: true,
                approved,
                payout,
                deductible: policy.deductible,
                message: approved ? 
                    `Claim approved! Payout: $${payout.toLocaleString()}` : 
                    'Claim denied by insurance company'
            };

        } catch (error) {
            console.error('Error processing insurance claim:', error);
            return { success: false, message: 'Error processing claim' };
        }
    },

    calculateClaimApprovalChance(policy, claimAmount, description) {
        let baseChance = 0.75; // 75% base approval rate

        // Adjust based on claim size relative to coverage
        const claimRatio = claimAmount / policy.coverage_amount;
        if (claimRatio > 0.8) baseChance -= 0.3; // Large claims less likely
        else if (claimRatio > 0.5) baseChance -= 0.15;
        else if (claimRatio < 0.1) baseChance += 0.1; // Small claims more likely

        // Adjust based on description quality (simple heuristic)
        if (description.length > 200) baseChance += 0.1; // Detailed descriptions help
        if (description.toLowerCase().includes('negligence')) baseChance -= 0.2;
        if (description.toLowerCase().includes('accident')) baseChance += 0.1;

        return Math.max(0.1, Math.min(0.95, baseChance));
    }
};
