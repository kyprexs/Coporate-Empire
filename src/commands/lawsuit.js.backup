const { SlashCommandBuilder, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('lawsuit')
        .setDescription('Legal system for disputes and litigation')
        .addSubcommand(subcommand =>
            subcommand
                .setName('file')
                .setDescription('File a lawsuit against a company')
                .addStringOption(option =>
                    option
                        .setName('defendant')
                        .setDescription('Company name or ticker symbol to sue')
                        .setRequired(true)
                )
                .addNumberOption(option =>
                    option
                        .setName('damages')
                        .setDescription('Requested damages amount')
                        .setRequired(true)
                        .setMinValue(1000)
                        .setMaxValue(10000000)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('view')
                .setDescription('View details of a lawsuit')
                .addIntegerOption(option =>
                    option
                        .setName('lawsuit_id')
                        .setDescription('Lawsuit ID to view')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('List lawsuits (your filed cases or cases against your companies)')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('settle')
                .setDescription('Propose a settlement for a lawsuit')
                .addIntegerOption(option =>
                    option
                        .setName('lawsuit_id')
                        .setDescription('Lawsuit ID to settle')
                        .setRequired(true)
                )
                .addNumberOption(option =>
                    option
                        .setName('amount')
                        .setDescription('Settlement amount offered')
                        .setRequired(true)
                        .setMinValue(0)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('judge')
                .setDescription('Make a ruling on a lawsuit (Admin only)')
                .addIntegerOption(option =>
                    option
                        .setName('lawsuit_id')
                        .setDescription('Lawsuit ID to rule on')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option
                        .setName('ruling')
                        .setDescription('Court ruling')
                        .setRequired(true)
                        .addChoices(
                            { name: 'Dismiss - No merit', value: 'dismissed' },
                            { name: 'Rule for Plaintiff - Award damages', value: 'plaintiff' },
                            { name: 'Rule for Defendant - No damages', value: 'defendant' }
                        )
                )
                .addNumberOption(option =>
                    option
                        .setName('award')
                        .setDescription('Damage award (if ruling for plaintiff)')
                        .setRequired(false)
                        .setMinValue(0)
                )
        ),

    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand();

        switch (subcommand) {
            case 'file':
                await this.handleFile(interaction, client);
                break;
            case 'view':
                await this.handleView(interaction, client);
                break;
            case 'list':
                await this.handleList(interaction, client);
                break;
            case 'settle':
                await this.handleSettle(interaction, client);
                break;
            case 'judge':
                await this.handleJudge(interaction, client);
                break;
        }
    },

    async handleFile(interaction, client) {
        try {
            const defendantQuery = interaction.options.getString('defendant');
            const requestedDamages = interaction.options.getNumber('damages');

            // Find the defendant company
            const company = await client.db.db.get(`
                SELECT c.*, u.username as owner_username 
                FROM companies c
                JOIN users u ON c.owner_id = u.discord_id
                WHERE (LOWER(c.name) LIKE LOWER(?) OR LOWER(c.ticker_symbol) LIKE LOWER(?))
                AND c.status = 'active'
            `, [`%${defendantQuery}%`, `%${defendantQuery}%`]);

            if (!company) {
                await interaction.reply({
                    content: '‚ùå No active company found with that name or ticker symbol.',
                    ephemeral: true
                });
                return;
            }

            // Check if user is trying to sue their own company
            if (company.owner_id === interaction.user.id) {
                await interaction.reply({
                    content: '‚ùå You cannot file a lawsuit against your own company.',
                    ephemeral: true
                });
                return;
            }

            // Check if user has enough cash for filing fee
            const filingFee = 1000;
            const user = await client.db.getUser(interaction.user.id);
            if (user.cash < filingFee) {
                await interaction.reply({
                    content: `‚ùå Insufficient funds for filing fee. You need $${filingFee.toLocaleString()} but have $${user.cash.toLocaleString()}.`,
                    ephemeral: true
                });
                return;
            }

            // Create modal for lawsuit details
            const modal = new ModalBuilder()
                .setCustomId(`lawsuit_file_${company.id}_${requestedDamages}`)
                .setTitle(`Sue ${company.name}`);

            const claimInput = new TextInputBuilder()
                .setCustomId('claim')
                .setLabel('Legal Claim')
                .setStyle(TextInputStyle.Paragraph)
                .setPlaceholder('Describe your legal claim, the harm done, and why you deserve damages...')
                .setRequired(true)
                .setMaxLength(1000);

            const evidenceInput = new TextInputBuilder()
                .setCustomId('evidence')
                .setLabel('Supporting Evidence')
                .setStyle(TextInputStyle.Paragraph)
                .setPlaceholder('Provide evidence, documentation, or reasoning supporting your case...')
                .setRequired(true)
                .setMaxLength(1000);

            const row1 = new ActionRowBuilder().addComponents(claimInput);
            const row2 = new ActionRowBuilder().addComponents(evidenceInput);

            modal.addComponents(row1, row2);
            await interaction.showModal(modal);

        } catch (error) {
            console.error('Error in lawsuit file command:', error);
            await interaction.reply({
                content: '‚ùå There was an error processing your lawsuit filing.',
                ephemeral: true
            });
        }
    },

    async handleView(interaction, client) {
        try {
            const lawsuitId = interaction.options.getInteger('lawsuit_id');

            const lawsuit = await client.db.getLawsuit(lawsuitId);

            if (!lawsuit) {
                await interaction.reply({
                    content: '‚ùå Lawsuit not found.',
                    ephemeral: true
                });
                return;
            }

            // Check if user has permission to view (plaintiff, defendant owner, or admin)
            const isPlaintiff = lawsuit.plaintiff_id === interaction.user.id;
            const isDefendantOwner = lawsuit.defendant_company_owner_id === interaction.user.id;
            const isAdmin = interaction.member.roles.cache.has(process.env.ADMIN_ROLE_ID);

            if (!isPlaintiff && !isDefendantOwner && !isAdmin) {
                await interaction.reply({
                    content: '‚ùå You do not have permission to view this lawsuit.',
                    ephemeral: true
                });
                return;
            }

            const statusEmoji = {
                'pending': '‚è≥',
                'active': 'üü¢',
                'settled': 'ü§ù',
                'dismissed': '‚ùå',
                'ruled': '‚öñÔ∏è'
            };

            const embed = new EmbedBuilder()
                .setTitle(`‚öñÔ∏è Lawsuit #${lawsuit.id}`)
                .setColor(this.getStatusColor(lawsuit.status))
                .addFields(
                    { name: 'Status', value: `${statusEmoji[lawsuit.status] || '‚ùì'} ${lawsuit.status.toUpperCase()}`, inline: true },
                    { name: 'Plaintiff', value: lawsuit.plaintiff_username, inline: true },
                    { name: 'Defendant', value: lawsuit.defendant_company_name, inline: true },
                    { name: 'Damages Requested', value: `$${lawsuit.requested_damages.toLocaleString()}`, inline: true },
                    { name: 'Filing Fee', value: `$${lawsuit.filing_fee.toLocaleString()}`, inline: true },
                    { name: 'Filed Date', value: new Date(lawsuit.filed_at).toLocaleDateString(), inline: true },
                    { name: 'Legal Claim', value: lawsuit.claim, inline: false }
                )
                .setTimestamp()
                .setFooter({ text: 'Corporate Empire Legal System' });

            if (lawsuit.settlement_amount) {
                embed.addFields({
                    name: 'Settlement Amount',
                    value: `$${lawsuit.settlement_amount.toLocaleString()}`,
                    inline: true
                });
            }

            if (lawsuit.ruling) {
                embed.addFields({
                    name: 'Court Ruling',
                    value: lawsuit.ruling,
                    inline: false
                });
            }

            if (lawsuit.judge_id) {
                const judge = await client.db.getUser(lawsuit.judge_id);
                embed.addFields({
                    name: 'Judge',
                    value: judge?.username || 'Unknown',
                    inline: true
                });
            }

            const buttons = new ActionRowBuilder();

            // Add relevant buttons based on status and user role
            if (lawsuit.status === 'pending' && isDefendantOwner) {
                buttons.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`lawsuit_settle_${lawsuit.id}`)
                        .setLabel('ü§ù Propose Settlement')
                        .setStyle(ButtonStyle.Primary)
                );
            }

            if (lawsuit.status === 'active' && isAdmin) {
                buttons.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`lawsuit_rule_${lawsuit.id}`)
                        .setLabel('‚öñÔ∏è Make Ruling')
                        .setStyle(ButtonStyle.Danger)
                );
            }

            const components = buttons.components.length > 0 ? [buttons] : [];
            await interaction.reply({ embeds: [embed], components });

        } catch (error) {
            console.error('Error in lawsuit view command:', error);
            await interaction.reply({
                content: '‚ùå There was an error retrieving lawsuit information.',
                ephemeral: true
            });
        }
    },

    async handleList(interaction, client) {
        try {
            // Get lawsuits where user is plaintiff or defendant
            const lawsuits = await client.db.db.all(`
                SELECT l.*, c.name as defendant_company_name, u.username as plaintiff_username,
                       c.owner_id as defendant_owner_id
                FROM lawsuits l
                JOIN companies c ON l.defendant_company_id = c.id
                JOIN users u ON l.plaintiff_id = u.discord_id
                WHERE l.plaintiff_id = ? OR c.owner_id = ?
                ORDER BY l.filed_at DESC
            `, [interaction.user.id, interaction.user.id]);

            if (lawsuits.length === 0) {
                await interaction.reply({
                    content: 'üìÑ You have no lawsuits filed or pending against your companies.',
                    ephemeral: true
                });
                return;
            }

            const embed = new EmbedBuilder()
                .setTitle('‚öñÔ∏è Your Legal Cases')
                .setColor(0x4169E1)
                .setDescription(`You have ${lawsuits.length} legal case(s)`)
                .setTimestamp()
                .setFooter({ text: 'Corporate Empire Legal System' });

            for (const lawsuit of lawsuits.slice(0, 10)) { // Limit for embed space
                const isPlaintiff = lawsuit.plaintiff_id === interaction.user.id;
                const statusEmoji = {
                    'pending': '‚è≥',
                    'active': 'üü¢',
                    'settled': 'ü§ù',
                    'dismissed': '‚ùå',
                    'ruled': '‚öñÔ∏è'
                };

                embed.addFields({
                    name: `Case #${lawsuit.id} ${statusEmoji[lawsuit.status] || '‚ùì'}`,
                    value: `**${isPlaintiff ? 'You vs' : lawsuit.plaintiff_username + ' vs'} ${lawsuit.defendant_company_name}**\\n**Damages:** $${lawsuit.requested_damages.toLocaleString()}\\n**Status:** ${lawsuit.status}\\n**Filed:** ${new Date(lawsuit.filed_at).toLocaleDateString()}`,
                    inline: true
                });
            }

            if (lawsuits.length > 10) {
                embed.addFields({
                    name: '‚ÑπÔ∏è Note',
                    value: `Showing first 10 cases. Total: ${lawsuits.length}`,
                    inline: false
                });
            }

            embed.addFields({
                name: 'üìã Commands',
                value: '‚Ä¢ `/lawsuit view <id>` - View case details\\n‚Ä¢ `/lawsuit settle <id> <amount>` - Propose settlement\\n‚Ä¢ `/lawsuit file` - File new lawsuit',
                inline: false
            });

            await interaction.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Error in lawsuit list command:', error);
            await interaction.reply({
                content: '‚ùå There was an error retrieving lawsuit information.',
                ephemeral: true
            });
        }
    },

    async handleSettle(interaction, client) {
        try {
            const lawsuitId = interaction.options.getInteger('lawsuit_id');
            const settlementAmount = interaction.options.getNumber('amount');

            const lawsuit = await client.db.db.get(`
                SELECT l.*, c.name as defendant_company_name, c.owner_id as defendant_owner_id,
                       u.username as plaintiff_username
                FROM lawsuits l
                JOIN companies c ON l.defendant_company_id = c.id
                JOIN users u ON l.plaintiff_id = u.discord_id
                WHERE l.id = ?
            `, [lawsuitId]);

            if (!lawsuit) {
                await interaction.reply({
                    content: '‚ùå Lawsuit not found.',
                    ephemeral: true
                });
                return;
            }

            // Check if user can settle (defendant or admin)
            const isDefendant = lawsuit.defendant_owner_id === interaction.user.id;
            const isAdmin = interaction.member.roles.cache.has(process.env.ADMIN_ROLE_ID);

            if (!isDefendant && !isAdmin) {
                await interaction.reply({
                    content: '‚ùå Only the defendant company owner can propose settlements.',
                    ephemeral: true
                });
                return;
            }

            // Check if lawsuit is in a settleable state
            if (!['pending', 'active'].includes(lawsuit.status)) {
                await interaction.reply({
                    content: '‚ùå This lawsuit cannot be settled in its current status.',
                    ephemeral: true
                });
                return;
            }

            // Check if defendant has enough cash
            const defendant = await client.db.getUser(lawsuit.defendant_owner_id);
            if (defendant.cash < settlementAmount) {
                await interaction.reply({
                    content: `‚ùå Insufficient funds for settlement. Company owner has $${defendant.cash.toLocaleString()} but offered $${settlementAmount.toLocaleString()}.`,
                    ephemeral: true
                });
                return;
            }

            // Process settlement
            await client.db.db.run('BEGIN TRANSACTION');

            try {
                // Transfer settlement amount
                await client.db.updateUserCash(lawsuit.defendant_owner_id, -settlementAmount);
                await client.db.updateUserCash(lawsuit.plaintiff_id, settlementAmount);

                // Update lawsuit status
                await client.db.db.run(`
                    UPDATE lawsuits 
                    SET status = 'settled', settlement_amount = ?, resolved_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                `, [settlementAmount, lawsuitId]);

                await client.db.db.run('COMMIT');

                const embed = new EmbedBuilder()
                    .setTitle('ü§ù Lawsuit Settled')
                    .setColor(0x32CD32)
                    .addFields(
                        { name: 'Case', value: `#${lawsuitId}: ${lawsuit.plaintiff_username} vs ${lawsuit.defendant_company_name}`, inline: false },
                        { name: 'Settlement Amount', value: `$${settlementAmount.toLocaleString()}`, inline: true },
                        { name: 'Original Damages', value: `$${lawsuit.requested_damages.toLocaleString()}`, inline: true },
                        { name: 'Settlement %', value: `${((settlementAmount / lawsuit.requested_damages) * 100).toFixed(1)}%`, inline: true }
                    )
                    .setDescription('Case has been settled out of court. Payment has been transferred.')
                    .setTimestamp()
                    .setFooter({ text: 'Corporate Empire Legal System' });

                await interaction.reply({ embeds: [embed] });

                // Notify the plaintiff
                try {
                    const plaintiff = await interaction.guild.members.fetch(lawsuit.plaintiff_id);
                    const notificationEmbed = new EmbedBuilder()
                        .setTitle('ü§ù Settlement Received')
                        .setColor(0x32CD32)
                        .addFields(
                            { name: 'Case', value: `#${lawsuitId} vs ${lawsuit.defendant_company_name}`, inline: true },
                            { name: 'Settlement', value: `$${settlementAmount.toLocaleString()}`, inline: true }
                        )
                        .setDescription('Your lawsuit has been settled. The settlement amount has been added to your account.')
                        .setTimestamp();

                    await plaintiff.send({ embeds: [notificationEmbed] });
                } catch (dmError) {
                    console.log('Could not send settlement notification:', dmError.message);
                }

            } catch (error) {
                await client.db.db.run('ROLLBACK');
                throw error;
            }

        } catch (error) {
            console.error('Error in lawsuit settle command:', error);
            await interaction.reply({
                content: '‚ùå There was an error processing the settlement.',
                ephemeral: true
            });
        }
    },

    async handleJudge(interaction, client) {
        try {
            // Check if user is admin
            if (!interaction.member.roles.cache.has(process.env.ADMIN_ROLE_ID)) {
                await interaction.reply({
                    content: '‚ùå This command is only available to administrators.',
                    ephemeral: true
                });
                return;
            }

            const lawsuitId = interaction.options.getInteger('lawsuit_id');
            const ruling = interaction.options.getString('ruling');
            const award = interaction.options.getNumber('award');

            const lawsuit = await client.db.db.get(`
                SELECT l.*, c.name as defendant_company_name, c.owner_id as defendant_owner_id,
                       u.username as plaintiff_username
                FROM lawsuits l
                JOIN companies c ON l.defendant_company_id = c.id
                JOIN users u ON l.plaintiff_id = u.discord_id
                WHERE l.id = ?
            `, [lawsuitId]);

            if (!lawsuit) {
                await interaction.reply({
                    content: '‚ùå Lawsuit not found.',
                    ephemeral: true
                });
                return;
            }

            if (!['pending', 'active'].includes(lawsuit.status)) {
                await interaction.reply({
                    content: '‚ùå This lawsuit has already been resolved.',
                    ephemeral: true
                });
                return;
            }

            let finalAward = 0;
            let rulingText = '';

            switch (ruling) {
                case 'dismissed':
                    rulingText = 'Case dismissed - claim lacks merit';
                    break;
                case 'plaintiff':
                    finalAward = award || lawsuit.requested_damages;
                    rulingText = `Court rules in favor of plaintiff. Defendant must pay $${finalAward.toLocaleString()} in damages.`;
                    break;
                case 'defendant':
                    rulingText = 'Court rules in favor of defendant. No damages awarded.';
                    break;
            }

            // Process the ruling
            await client.db.db.run('BEGIN TRANSACTION');

            try {
                if (ruling === 'plaintiff' && finalAward > 0) {
                    // Award damages to plaintiff
                    await client.db.updateUserCash(lawsuit.defendant_owner_id, -finalAward);
                    await client.db.updateUserCash(lawsuit.plaintiff_id, finalAward);
                }

                // Update lawsuit record
                await client.db.db.run(`
                    UPDATE lawsuits 
                    SET status = 'ruled', ruling = ?, settlement_amount = ?, 
                        judge_id = ?, resolved_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                `, [rulingText, finalAward, interaction.user.id, lawsuitId]);

                await client.db.db.run('COMMIT');

                const embed = new EmbedBuilder()
                    .setTitle('‚öñÔ∏è Court Ruling')
                    .setColor(ruling === 'plaintiff' ? 0x00FF00 : ruling === 'defendant' ? 0x0099FF : 0xFF0000)
                    .addFields(
                        { name: 'Case', value: `#${lawsuitId}: ${lawsuit.plaintiff_username} vs ${lawsuit.defendant_company_name}`, inline: false },
                        { name: 'Judge', value: interaction.user.username, inline: true },
                        { name: 'Ruling', value: ruling.charAt(0).toUpperCase() + ruling.slice(1), inline: true },
                        { name: 'Award', value: finalAward > 0 ? `$${finalAward.toLocaleString()}` : 'None', inline: true },
                        { name: 'Court Decision', value: rulingText, inline: false }
                    )
                    .setTimestamp()
                    .setFooter({ text: 'Corporate Empire Legal System' });

                await interaction.reply({ embeds: [embed] });

                // Notify both parties
                try {
                    const notificationEmbed = new EmbedBuilder()
                        .setTitle('‚öñÔ∏è Court Ruling Issued')
                        .setColor(embed.data.color)
                        .addFields(
                            { name: 'Case', value: `#${lawsuitId}`, inline: true },
                            { name: 'Ruling', value: rulingText, inline: false }
                        )
                        .setTimestamp();

                    const [plaintiff, defendant] = await Promise.all([
                        interaction.guild.members.fetch(lawsuit.plaintiff_id),
                        interaction.guild.members.fetch(lawsuit.defendant_owner_id)
                    ]);

                    await Promise.all([
                        plaintiff.send({ embeds: [notificationEmbed] }),
                        defendant.send({ embeds: [notificationEmbed] })
                    ]);
                } catch (dmError) {
                    console.log('Could not send ruling notifications:', dmError.message);
                }

            } catch (error) {
                await client.db.db.run('ROLLBACK');
                throw error;
            }

        } catch (error) {
            console.error('Error in lawsuit judge command:', error);
            await interaction.reply({
                content: '‚ùå There was an error processing the court ruling.',
                ephemeral: true
            });
        }
    },

    getStatusColor(status) {
        const colors = {
            'pending': 0xFFA500,
            'active': 0x32CD32,
            'settled': 0x0099FF,
            'dismissed': 0xFF0000,
            'ruled': 0x9370DB
        };
        return colors[status] || 0x808080;
    }
};
